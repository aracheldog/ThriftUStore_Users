"""
Django settings for ThriftUStore_Users project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import datetime
import os
from pathlib import Path
from google.cloud import pubsub_v1

APPEND_SLASH=False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-e-1u1_)g9kauscz^9(_c)r6ro%#l%7m)ju&pl8yf7%tycuonr%"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'Users.apps.UsersConfig',
    'rest_framework',
    'rest_framework_simplejwt',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

]



MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    # "Users.middleware.RequestResponseLoggerMiddleware",
]

ROOT_URLCONF = "ThriftUStore_Users.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ThriftUStore_Users.wsgi.application"


# for connecting to local database
SETTING_MODEL = 'dev'
# SITE_ID = 1

# # for connecting to remote database
# SETTING_MODEL = 'test'

# change this one before deployment
SITE_ID = 2

if 'GAE_INSTANCE' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'HOST': '/cloudsql/user-microservice-402518:us-east1:thriftustore-user',
            'NAME': 'Users',
            'USER': 'thriftustore-user',
            'PASSWORD': 'dbuserdbuser',
        }
    }
# If running locally, use a local database.
else:
    if SETTING_MODEL == 'test':
        print("connect to cloud database")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'HOST': '35.196.238.126',
                'NAME': 'Users',
                'USER': 'thriftustore-user',
                'PASSWORD': 'dbuserdbuser',
            }
        }
    else:
        print("connect to local database")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': 'users',
                'USER': 'root',
                'PASSWORD': 'dbuserdbuser',
                'HOST': 'localhost',
                'PORT': '3306',
            }
        }




# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = 'static'

AUTH_USER_MODEL = 'Users.User'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [

        'rest_framework.authentication.SessionAuthentication',
    ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=1),
    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(days=14),
    'SIGNING_KEY': 'your_secret_key'
}



AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]



SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'offline',
                        'prompt': 'select_account'},

    }
}
# SOCIALACCOUNT_LOGIN_ON_GET=True
SOCIALACCOUNT_ADAPTER = 'Users.adaptor.MySocialAccountAdapter'
#
# LOGIN_REDIRECT_URL = 'users/google/login/callback/'
LOGIN_REDIRECT_URL = 'google_token'
# LOGOUT_REDIRECT_URL = '/'



ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_STORE_TOKENS = True
SOCIALACCOUNT_LOGIN_ON_GET=True



credentials_path = "user-microservice-pub-sub-keys.json"
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credentials_path

# smarty api configuration
os.environ['SMARTY_AUTH_WEB'] = "187399186880349580"
# os.environ['SMARTY_WEBSITE_DOMAIN'] = "127.0.0.1"
os.environ['SMARTY_WEBSITE_DOMAIN'] = "user-microservice-402518.ue.r.appspot.com"



# # # configurations for logging:
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'request_file': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'requests.log'),
#         },
#         'response_file': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'responses.log'),
#         },
#     },
#     'loggers': {
#         'request_logger': {
#             'handlers': ['request_file'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#         'response_logger': {
#             'handlers': ['response_file'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#     },
# }
